The overall learning objective of this lab is to get familiar with
the concepts on substitution ciphers and symmetric key and public
key cryptography. You will be getting first-hand experience with
using the OpenSSL commandline tool and library to encrypt/decrypt
messages under different encryption modes, and to construct message
digests with hash functions. The tasks are set up in such a way
that you not only gain experience with the use of these various
mechanisms, but also with their properties. You are encouraged to
think about what these tools are doing, and why you get the results
you get. Some tasks ask you to write up these observations. You
will be using the same VM that you used for the previous projects.
Also, you will have to read up on the OpenSSL documentation.

Task 1: Cracking the Vigenere cipher

   In class, we only considered the Vigenere Cipher as a generalization
   of the Caesar Cipher. However, as described by Vigenere it can
   be used as a polyalphabetic Caesar-type Cipher. This employs a
   keyword, each letter of which is the shift for successive
   characters of the message.  That is, if we have "abc" as the
   keyword, then the first character of the ciphertext would be the
   first letter of the plaintext plus 0 (the value of "a"), the
   second would be plaintext plus 1, the third would be plaintext
   plus 2, and then the pattern would repeat with the fourth
   character. You can view this as a three-byte block cipher in ECB
   mode, if that helps. Section 5.2.1 of _Security Engineering_ goes
   into detail.

   As we saw with the repeated XOR in class, we can apply frequency
   analysis to individual characters (and even n-grams) encrypted
   with the same substitution. What we need to know is how long the
   keyword is, in order to know which characters are enciphered
   with the same substitution. Anderson discusses this briefly in
   the book, but you might find the Wikipedia page
   https://en.wikipedia.org/wiki/Index_of_coincidence useful as an
   additional reference.

   Your target ciphertext is contained in cipher1.txt

   You should develop tools (in the language of your choice) to
   perform the Index of Coincidence computation, frequency analysis
   (see crypto-exercises for n-gram frequencies for English), and
   decryption. Your submission should consist of:

      - keyword1.txt, which should include the keyword that you
                      determined

      - message1.txt, which should include the plaintext corresponding
                      to cipher1.txt

      - files.txt, which should include a list of all the program
		   files you used, any build instructions, and
		   instructions for calling the program or programs

   As a recommendation, you might consider using keyword1.txt and
   cipher1.txt as inputs to your decryption program, which would
   then produce message1.txt.

Task 2: Use OpenSSL for encryption

   OpenSSL (https://www.openssl.org/) is one of the most popular
   packages (at least in C) for performing cryptographic operations.
   It has implementations of all the major cryptosystems, including
   AES, which is what we will be using in this task. It has an API
   that allows it to be used in programs requiring cryptography, as
   well as a number of command-line utilities.

   AES takes a 256-bit (32-byte) key, and a 128-bit (16-byte) IV.
   You will use your student ID, right-padded with 0's, as the key,
   and a string of 16 0's as the IV. As discussed in class, if you
   want to encrypt more than a single block's worth of data, you
   need to select a streaming mode of operation. We will employ CBC
   (Cipher Block Chain).

   The file message2.txt contains a large plaintext to encrypt.

   Using the OpenSSL package, encrypt the contents of message2.txt
   with AES-256 given the key and IV as specified. Then, use SHA256
   to hash this ciphertext to a short string. You should use the
   command-line utiltiy sha256sum to do this. Your submission for
   this task should include:

      - hash2.txt, containing the SHA256 hash of the AES-256
                   ciphertext

